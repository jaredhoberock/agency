# this python/scons script implements Agency's build logic
# it may make the most sense to read this file beginning
# at the bottom and proceeding towards the top

import os


def ProgramPerSourceInCurrentDirectory(env):
  """Collects all source files in the current directory and creates a program from each of them.
  Returns the list of all such programs created.
  """
  sources = []
  directories = ['.']
  extensions = ['.cpp', '.cu']
  
  for dir in directories:
    for ext in extensions:
      regex = os.path.join(dir, '*' + ext)
      sources.extend(env.Glob(regex))

  programs = []
  for src in sources:
    programs.append(env.Program(src))

  return programs


def RunProgram(env, program, run_program_command):
  """Creates a unit test by running the given program after it is built."""
  relative_path_from_root = env.Dir('.').path

  # XXX WAR an issue where env.Dir('.').path does not return a relative path for the root directory
  root_abspath = os.path.dirname(os.path.realpath("__file__"))
  if relative_path_from_root == root_abspath:
    relative_path_from_root = '.'

  # elide '.'
  if relative_path_from_root == '.':
    relative_path_from_root = ''
  alias = env.Alias(os.path.join(relative_path_from_root, run_program_command), [program], program[0].abspath)
  env.AlwaysBuild(alias)
  return alias


def RunPrograms(env, programs, run_programs_command):
  """Creates a unit test for each program in the given list of programs.
  Returns a list of aliases where each alias corresponds to a unit test.
  """
  aliases = []
  for p in programs:
    aliases.append(RunProgram(env, p, run_programs_command))
  return aliases


# this function takes a SCons environment and specifies some compiler
# flags to use
def apply_compiler_flags(env):
  # first, general C++ flags
  env.MergeFlags(['-O3', '-std=c++11', '-lstdc++', '-lpthread'])
  
  # next, flags for nvcc
  env.MergeFlags(['--expt-extended-lambda', '-arch=sm_52'])


# script execution begins here

# first set up some variables we can control from the command line
vars = Variables()
vars.Add('CXX', 'C++ compiler', 'clang')
vars.Add('CPPPATH', 'Agency include path', Dir('..'))

# create a SCons build environment
env = Environment(variables = vars, tools = ['default', 'nvcc-scons/nvcc'])

apply_compiler_flags(env)

# add our custom shorthand methods for subsidiary SConscripts' use
env.AddMethod(ProgramPerSourceInCurrentDirectory)
env.AddMethod(RunPrograms)

# recurse into all SConscripts in immediate child directories
# gather executable programs built by subsidiary SConscripts
programs = []
children = env.Glob('*/SConscript')
for child in children:
  programs.extend(env.SConscript(child, exports='env'))

# create an alias named 'run_tests' that runs all the executable programs we've built
env.RunPrograms(programs, 'run_tests')

