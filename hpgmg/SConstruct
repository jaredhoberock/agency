import os

# command line variables
vars = Variables()
vars.Add('CXX', 'compiler', 'gcc-5')
vars.Add(EnumVariable('method', None, 'agency', allowed_values=('agency', 'openmp')), help='Parallel method')

env = Environment(variables = vars)
env.Append(CPPFLAGS   = ['-Ofast', '-fopenmp'])
env.Append(CPPDEFINES = ['USE_GSRB=1', 'USE_FCYCLES=1', 'USE_BICGSTAB=1'])
env.Append(LIBS       = ['m','stdc++', 'gomp'])

if env['method'] == 'agency':
  env.Append(CPPPATH    = ['..'])
  env.Append(CPPFLAGS   = ['-std=c++14'])
  env.Append(CPPDEFINES = ['USE_AGENCY'])
  env.Append(LIBS       = ['pthread'])

Help(vars.GenerateHelpText(env))

src = 'hpgmg-fv.cpp'
exe = src.split('.')[0] + '-' + env['method']
# create a test program for each source
test = env.Program(exe, src)
# add the test to the 'run_tests' alias
test_alias = env.Alias('run_tests', [test], test[0].abspath)
# always build the 'run_tests' target whether or not it needs it
env.AlwaysBuild(test_alias)

